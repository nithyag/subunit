#!/usr/bin/env python
#  subunit: extensions to python unittest to get test results from subprocesses.
#  Hewlett Packard Enterprise (c) 2017
#
#  Licensed under either the Apache License, Version 2.0 or the BSD 3-clause
#  license at the users choice. A copy of both licenses are available in the
#  project source as Apache-2.0 and BSD. You may not use this file except in
#  compliance with one of these two licences.
#  
#  Unless required by applicable law or agreed to in writing, software
#  distributed under these licenses is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
#  license you chose for the specific language governing permissions and
#  limitations under that license.
#

"""A filter that reads a xunitXML stream and outputs a subunit stream.
"""

import datetime
import sys

from subunit.iso8601 import UTC

from subunit.v2 import StreamResultToBytes

STATUS_CODES = frozenset([
    'exists',
    'fail',
    'skip',
    'success',
    'uxsuccess',
    'xfail',
])

try:
    import xunitparser
except ImportError:
    sys.stderr.write("xunitparser (https://pypi.python.org/pypi/xunitparser)"
                     "is required for this filter.")
    raise

def xunit2subunit(xunitxml_input=sys.stdin, output=sys.stdout):
    output = StreamResultToBytes(output)
    output.startTestRun()
    ts, tr = xunitparser.parse(xunitxml_input)
    for tc in ts:
        test_id = tc.methodname
        test_metadata = None
        test_status = None
        test_time = tc.time
        if tc.good:
            if tc.result == "skipped":
                test_status = "skip"
            else:
                test_status = "success"
        else:
            test_status = "fail"
        write_test(output, test_id, test_status, test_metadata, test_time)
    output.stopTestRun()

def write_test(output, test_id, test_status, metadatas, test_time):
    write_status = output.status
    kwargs = {}
    if metadatas:
        if 'tags' in metadatas:
            tags = metadatas['tags']
            kwargs['test_tags'] = tags.split(',')
        if 'attrs' in metadatas:
            test_id = test_id + '[' + metadatas['attrs'] + ']'
    kwargs['test_id'] = test_id
    if test_status in STATUS_CODES:
        kwargs['test_status'] = test_status
    kwargs['timestamp'] = create_timestamp()
    write_status(**kwargs)
    kwargs['timestamp'] = create_timestamp() + test_time

def create_timestamp():
    return datetime.datetime.now(UTC)

if __name__ == '__main__':
    sys.exit(xunit2subunit(sys.stdin, sys.stdout))
